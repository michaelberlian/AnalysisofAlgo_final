
# parsetab.py
#####################################################
# This file is automatically generated. Do not edit.
#####################################################
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DIVIDES MINUS PLUS TIMES alpha approx beta bigger biggerEqual closingBracket comma cos equal float fraction gamma infinity int integral log notEqual openingBracket percentage pi power root sigma sin smaller smallerEqual tan theta variable\n\tMiM : expression\n\t\t\t | equation\n\t\t\t | logical_expr\n\t\t\t | empty\n\t\n\texpression : fraction openingBracket expression comma expression closingBracket\n\t\t\t\t\t\t | root openingBracket expression comma expression closingBracket\n\t\t\t\t\t\t | log openingBracket int comma expression closingBracket\n\t\t\t\t\t\t | log openingBracket variable comma expression closingBracket\n\t\n\texpression : trigono openingBracket expression closingBracket\n\t\t\t\t\t\t | sin openingBracket expression closingBracket\n\t\t\t\t\t\t | cos openingBracket expression closingBracket\n\t\t\t\t\t\t | tan openingBracket expression closingBracket\n\t\n\tequation : sigma openingBracket assign comma infinity comma expression closingBracket\n\t\t\t\t\t | sigma openingBracket assign comma int comma expression closingBracket\n\t\t\t\t\t | integral openingBracket int comma infinity comma expression closingBracket\n\t\t\t\t\t | integral openingBracket int comma int comma expression closingBracket\n\t\n\texpression : expression PLUS expression\n\t\t\t\t\t\t | expression MINUS expression\n\t\t\t\t\t\t | expression DIVIDES expression\n\t\t\t\t\t\t | expression TIMES expression\n\t\t\t\t\t\t | expression power int\n\t\t\t\t\t\t | expression power coefficient\n\t\t\t\t\t\t | openingBracket expression closingBracket\n\t\n\texpression : expression power openingBracket expression closingBracket\n\t\n\texpression : int\n\t\t\t\t\t\t | float\n\t\t\t\t\t\t | coefficient\n\t\t\t\t\t\t | pi\n\t\t\t\t\t\t | percentage\n\t\t\t\t\t\t | alpha\n\t\t\t\t\t\t | beta\n\t\t\t\t\t\t | gamma\n\t\t\t\t\t\t | theta\n\t\t\t\t\t\t | infinity\n\t\n\tcoefficient : int variable\n\t\t\t\t\t\t\t| float variable\n\t\t\t\t\t\t\t| coefficient variable\n\t\t\t\t\t\t\t| expression percentage\n\t\n\tcoefficient : int theta\n\t\t\t\t\t\t\t| int beta\n\t\t\t\t\t\t\t| int alpha\n\t\t\t\t\t\t\t| float theta\n\t\t\t\t\t\t\t| float beta\n\t\t\t\t\t\t\t| float alpha\n\t\n\tcoefficient : variable\n\t\n\ttrigono : sin power int\n\t\t\t\t\t| cos power int\n\t\t\t\t\t| tan power int\n\t\n\ttrigono : sin power variable\n\t\t\t\t\t| cos power variable\n\t\t\t\t\t| tan power variable\n\t\n\tequation : variable equal expression\n\t\n\tlogical_expr : expression equal expression\n\t\t\t\t\t\t\t | expression bigger expression\n\t\t\t\t\t\t\t | expression smaller expression\n\t\t\t\t\t\t\t | expression biggerEqual expression\n\t\t\t\t\t\t\t | expression smallerEqual expression\n\t\t\t\t\t\t\t | expression notEqual expression\n\t\t\t\t\t\t\t | expression approx expression\n\t\n\tassign : variable equal int\n\t\n\tempty :\n\t'
    
_lr_action_items = {'fraction':([0,7,27,28,29,30,31,32,33,34,35,36,37,38,40,43,49,50,51,53,55,71,100,101,102,103,125,126,127,128,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'root':([0,7,27,28,29,30,31,32,33,34,35,36,37,38,40,43,49,50,51,53,55,71,100,101,102,103,125,126,127,128,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'log':([0,7,27,28,29,30,31,32,33,34,35,36,37,38,40,43,49,50,51,53,55,71,100,101,102,103,125,126,127,128,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'sin':([0,7,27,28,29,30,31,32,33,34,35,36,37,38,40,43,49,50,51,53,55,71,100,101,102,103,125,126,127,128,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'cos':([0,7,27,28,29,30,31,32,33,34,35,36,37,38,40,43,49,50,51,53,55,71,100,101,102,103,125,126,127,128,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'tan':([0,7,27,28,29,30,31,32,33,34,35,36,37,38,40,43,49,50,51,53,55,71,100,101,102,103,125,126,127,128,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'openingBracket':([0,6,7,8,9,12,13,14,15,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,43,49,50,51,53,55,71,88,89,91,92,94,95,100,101,102,103,125,126,127,128,],[7,40,7,43,44,50,51,53,55,62,63,7,7,7,7,71,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-46,-49,-47,-50,-48,-51,7,7,7,7,7,7,7,7,]),'int':([0,7,27,28,29,30,31,32,33,34,35,36,37,38,40,43,44,49,50,51,52,53,54,55,56,63,71,100,101,102,103,108,109,110,125,126,127,128,],[10,10,10,10,10,10,69,10,10,10,10,10,10,10,10,10,83,10,10,10,88,10,91,10,94,98,10,10,10,10,10,117,118,119,10,10,10,10,]),'float':([0,7,27,28,29,30,31,32,33,34,35,36,37,38,40,43,49,50,51,53,55,71,100,101,102,103,125,126,127,128,],[17,17,17,17,17,17,72,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'pi':([0,7,27,28,29,30,31,32,33,34,35,36,37,38,40,43,49,50,51,53,55,71,100,101,102,103,125,126,127,128,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'percentage':([0,2,7,10,11,16,17,18,19,20,21,22,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,53,55,57,58,59,60,61,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,90,93,99,100,101,102,103,104,105,106,107,111,112,113,114,115,121,122,123,124,125,126,127,128,129,130,131,132,],[19,39,19,-25,-45,-27,-26,-28,-29,-30,-31,-32,-33,-34,19,19,19,19,19,19,19,19,19,19,19,19,-38,19,39,-45,19,-35,-39,-40,-41,19,19,19,19,19,-37,-36,-42,-43,-44,39,39,39,39,39,-21,-22,19,-26,39,39,39,39,39,39,39,39,-23,39,39,39,39,39,39,39,19,19,19,19,-9,-10,-11,-12,-23,39,39,39,39,-5,-6,-7,-8,19,19,19,19,39,39,39,39,]),'alpha':([0,7,10,17,27,28,29,30,31,32,33,34,35,36,37,38,40,43,49,50,51,53,55,69,71,72,100,101,102,103,125,126,127,128,],[20,20,48,61,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,48,20,61,20,20,20,20,20,20,20,20,]),'beta':([0,7,10,17,27,28,29,30,31,32,33,34,35,36,37,38,40,43,49,50,51,53,55,69,71,72,100,101,102,103,125,126,127,128,],[21,21,47,60,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,47,21,60,21,21,21,21,21,21,21,21,]),'gamma':([0,7,27,28,29,30,31,32,33,34,35,36,37,38,40,43,49,50,51,53,55,71,100,101,102,103,125,126,127,128,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'theta':([0,7,10,17,27,28,29,30,31,32,33,34,35,36,37,38,40,43,49,50,51,53,55,69,71,72,100,101,102,103,125,126,127,128,],[23,23,46,59,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,46,23,59,23,23,23,23,23,23,23,23,]),'infinity':([0,7,27,28,29,30,31,32,33,34,35,36,37,38,40,43,49,50,51,53,55,71,100,101,102,103,108,110,125,126,127,128,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,116,120,24,24,24,24,]),'sigma':([0,],[25,]),'integral':([0,],[26,]),'variable':([0,7,10,11,16,17,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,69,70,71,72,100,101,102,103,125,126,127,128,],[11,42,45,-45,57,58,42,42,42,42,42,42,42,42,42,42,42,42,-38,42,-45,42,84,-35,-39,-40,-41,42,42,42,89,42,92,42,95,-37,-36,-42,-43,-44,97,45,57,42,58,42,42,42,42,42,42,42,42,]),'$end':([0,1,2,3,4,5,10,11,16,17,18,19,20,21,22,23,24,39,42,45,46,47,48,57,58,59,60,61,64,65,66,67,69,70,73,74,75,76,77,78,79,81,85,104,105,106,107,111,121,122,123,124,133,134,135,136,],[-61,0,-1,-2,-3,-4,-25,-45,-27,-26,-28,-29,-30,-31,-32,-33,-34,-38,-45,-35,-39,-40,-41,-37,-36,-42,-43,-44,-17,-18,-19,-20,-21,-22,-53,-54,-55,-56,-57,-58,-59,-23,-52,-9,-10,-11,-12,-24,-5,-6,-7,-8,-13,-14,-16,-15,]),'PLUS':([2,10,11,16,17,18,19,20,21,22,23,24,39,41,42,45,46,47,48,57,58,59,60,61,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,82,85,86,87,90,93,99,104,105,106,107,111,112,113,114,115,121,122,123,124,129,130,131,132,],[27,-25,-45,-27,-26,-28,-29,-30,-31,-32,-33,-34,-38,27,-45,-35,-39,-40,-41,-37,-36,-42,-43,-44,27,27,27,27,27,-21,-22,-26,27,27,27,27,27,27,27,27,-23,27,27,27,27,27,27,27,-9,-10,-11,-12,-23,27,27,27,27,-5,-6,-7,-8,27,27,27,27,]),'MINUS':([2,10,11,16,17,18,19,20,21,22,23,24,39,41,42,45,46,47,48,57,58,59,60,61,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,82,85,86,87,90,93,99,104,105,106,107,111,112,113,114,115,121,122,123,124,129,130,131,132,],[28,-25,-45,-27,-26,-28,-29,-30,-31,-32,-33,-34,-38,28,-45,-35,-39,-40,-41,-37,-36,-42,-43,-44,28,28,28,28,28,-21,-22,-26,28,28,28,28,28,28,28,28,-23,28,28,28,28,28,28,28,-9,-10,-11,-12,-23,28,28,28,28,-5,-6,-7,-8,28,28,28,28,]),'DIVIDES':([2,10,11,16,17,18,19,20,21,22,23,24,39,41,42,45,46,47,48,57,58,59,60,61,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,82,85,86,87,90,93,99,104,105,106,107,111,112,113,114,115,121,122,123,124,129,130,131,132,],[29,-25,-45,-27,-26,-28,-29,-30,-31,-32,-33,-34,-38,29,-45,-35,-39,-40,-41,-37,-36,-42,-43,-44,29,29,29,29,29,-21,-22,-26,29,29,29,29,29,29,29,29,-23,29,29,29,29,29,29,29,-9,-10,-11,-12,-23,29,29,29,29,-5,-6,-7,-8,29,29,29,29,]),'TIMES':([2,10,11,16,17,18,19,20,21,22,23,24,39,41,42,45,46,47,48,57,58,59,60,61,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,82,85,86,87,90,93,99,104,105,106,107,111,112,113,114,115,121,122,123,124,129,130,131,132,],[30,-25,-45,-27,-26,-28,-29,-30,-31,-32,-33,-34,-38,30,-45,-35,-39,-40,-41,-37,-36,-42,-43,-44,30,30,30,30,30,-21,-22,-26,30,30,30,30,30,30,30,30,-23,30,30,30,30,30,30,30,-9,-10,-11,-12,-23,30,30,30,30,-5,-6,-7,-8,30,30,30,30,]),'power':([2,10,11,13,14,15,16,17,18,19,20,21,22,23,24,39,41,42,45,46,47,48,57,58,59,60,61,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,82,85,86,87,90,93,99,104,105,106,107,111,112,113,114,115,121,122,123,124,129,130,131,132,],[31,-25,-45,52,54,56,-27,-26,-28,-29,-30,-31,-32,-33,-34,-38,31,-45,-35,-39,-40,-41,-37,-36,-42,-43,-44,31,31,31,31,31,-21,-22,-26,31,31,31,31,31,31,31,31,-23,31,31,31,31,31,31,31,-9,-10,-11,-12,-23,31,31,31,31,-5,-6,-7,-8,31,31,31,31,]),'equal':([2,10,11,16,17,18,19,20,21,22,23,24,39,42,45,46,47,48,57,58,59,60,61,64,65,66,67,69,70,81,97,104,105,106,107,111,121,122,123,124,],[32,-25,49,-27,-26,-28,-29,-30,-31,-32,-33,-34,-38,-45,-35,-39,-40,-41,-37,-36,-42,-43,-44,-17,-18,-19,-20,-21,-22,-23,109,-9,-10,-11,-12,-24,-5,-6,-7,-8,]),'bigger':([2,10,11,16,17,18,19,20,21,22,23,24,39,42,45,46,47,48,57,58,59,60,61,64,65,66,67,69,70,81,104,105,106,107,111,121,122,123,124,],[33,-25,-45,-27,-26,-28,-29,-30,-31,-32,-33,-34,-38,-45,-35,-39,-40,-41,-37,-36,-42,-43,-44,-17,-18,-19,-20,-21,-22,-23,-9,-10,-11,-12,-24,-5,-6,-7,-8,]),'smaller':([2,10,11,16,17,18,19,20,21,22,23,24,39,42,45,46,47,48,57,58,59,60,61,64,65,66,67,69,70,81,104,105,106,107,111,121,122,123,124,],[34,-25,-45,-27,-26,-28,-29,-30,-31,-32,-33,-34,-38,-45,-35,-39,-40,-41,-37,-36,-42,-43,-44,-17,-18,-19,-20,-21,-22,-23,-9,-10,-11,-12,-24,-5,-6,-7,-8,]),'biggerEqual':([2,10,11,16,17,18,19,20,21,22,23,24,39,42,45,46,47,48,57,58,59,60,61,64,65,66,67,69,70,81,104,105,106,107,111,121,122,123,124,],[35,-25,-45,-27,-26,-28,-29,-30,-31,-32,-33,-34,-38,-45,-35,-39,-40,-41,-37,-36,-42,-43,-44,-17,-18,-19,-20,-21,-22,-23,-9,-10,-11,-12,-24,-5,-6,-7,-8,]),'smallerEqual':([2,10,11,16,17,18,19,20,21,22,23,24,39,42,45,46,47,48,57,58,59,60,61,64,65,66,67,69,70,81,104,105,106,107,111,121,122,123,124,],[36,-25,-45,-27,-26,-28,-29,-30,-31,-32,-33,-34,-38,-45,-35,-39,-40,-41,-37,-36,-42,-43,-44,-17,-18,-19,-20,-21,-22,-23,-9,-10,-11,-12,-24,-5,-6,-7,-8,]),'notEqual':([2,10,11,16,17,18,19,20,21,22,23,24,39,42,45,46,47,48,57,58,59,60,61,64,65,66,67,69,70,81,104,105,106,107,111,121,122,123,124,],[37,-25,-45,-27,-26,-28,-29,-30,-31,-32,-33,-34,-38,-45,-35,-39,-40,-41,-37,-36,-42,-43,-44,-17,-18,-19,-20,-21,-22,-23,-9,-10,-11,-12,-24,-5,-6,-7,-8,]),'approx':([2,10,11,16,17,18,19,20,21,22,23,24,39,42,45,46,47,48,57,58,59,60,61,64,65,66,67,69,70,81,104,105,106,107,111,121,122,123,124,],[38,-25,-45,-27,-26,-28,-29,-30,-31,-32,-33,-34,-38,-45,-35,-39,-40,-41,-37,-36,-42,-43,-44,-17,-18,-19,-20,-21,-22,-23,-9,-10,-11,-12,-24,-5,-6,-7,-8,]),'closingBracket':([10,16,17,18,19,20,21,22,23,24,39,41,42,45,46,47,48,57,58,59,60,61,64,65,66,67,69,70,81,86,87,90,93,99,104,105,106,107,111,112,113,114,115,121,122,123,124,129,130,131,132,],[-25,-27,-26,-28,-29,-30,-31,-32,-33,-34,-38,81,-45,-35,-39,-40,-41,-37,-36,-42,-43,-44,-17,-18,-19,-20,-21,-22,-23,104,105,106,107,111,-9,-10,-11,-12,-24,121,122,123,124,-5,-6,-7,-8,133,134,135,136,]),'comma':([10,16,17,18,19,20,21,22,23,24,39,42,45,46,47,48,57,58,59,60,61,64,65,66,67,69,70,80,81,82,83,84,96,98,104,105,106,107,111,116,117,118,119,120,121,122,123,124,],[-25,-27,-26,-28,-29,-30,-31,-32,-33,-34,-38,-45,-35,-39,-40,-41,-37,-36,-42,-43,-44,-17,-18,-19,-20,-21,-22,100,-23,101,102,103,108,110,-9,-10,-11,-12,-24,125,126,-60,127,128,-5,-6,-7,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MiM':([0,],[1,]),'expression':([0,7,27,28,29,30,31,32,33,34,35,36,37,38,40,43,49,50,51,53,55,71,100,101,102,103,125,126,127,128,],[2,41,64,65,66,67,68,73,74,75,76,77,78,79,80,82,85,86,87,90,93,99,112,113,114,115,129,130,131,132,]),'equation':([0,],[3,]),'logical_expr':([0,],[4,]),'empty':([0,],[5,]),'trigono':([0,7,27,28,29,30,31,32,33,34,35,36,37,38,40,43,49,50,51,53,55,71,100,101,102,103,125,126,127,128,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'coefficient':([0,7,27,28,29,30,31,32,33,34,35,36,37,38,40,43,49,50,51,53,55,71,100,101,102,103,125,126,127,128,],[16,16,16,16,16,16,70,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'assign':([62,],[96,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MiM","S'",1,None,None,None),
  ('MiM -> expression','MiM',1,'p_MiM','parlex.py',176),
  ('MiM -> equation','MiM',1,'p_MiM','parlex.py',177),
  ('MiM -> logical_expr','MiM',1,'p_MiM','parlex.py',178),
  ('MiM -> empty','MiM',1,'p_MiM','parlex.py',179),
  ('expression -> fraction openingBracket expression comma expression closingBracket','expression',6,'p_expression_complex','parlex.py',186),
  ('expression -> root openingBracket expression comma expression closingBracket','expression',6,'p_expression_complex','parlex.py',187),
  ('expression -> log openingBracket int comma expression closingBracket','expression',6,'p_expression_complex','parlex.py',188),
  ('expression -> log openingBracket variable comma expression closingBracket','expression',6,'p_expression_complex','parlex.py',189),
  ('expression -> trigono openingBracket expression closingBracket','expression',4,'p_expression_tri','parlex.py',195),
  ('expression -> sin openingBracket expression closingBracket','expression',4,'p_expression_tri','parlex.py',196),
  ('expression -> cos openingBracket expression closingBracket','expression',4,'p_expression_tri','parlex.py',197),
  ('expression -> tan openingBracket expression closingBracket','expression',4,'p_expression_tri','parlex.py',198),
  ('equation -> sigma openingBracket assign comma infinity comma expression closingBracket','equation',8,'p_equation_sigma','parlex.py',204),
  ('equation -> sigma openingBracket assign comma int comma expression closingBracket','equation',8,'p_equation_sigma','parlex.py',205),
  ('equation -> integral openingBracket int comma infinity comma expression closingBracket','equation',8,'p_equation_sigma','parlex.py',206),
  ('equation -> integral openingBracket int comma int comma expression closingBracket','equation',8,'p_equation_sigma','parlex.py',207),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parlex.py',214),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parlex.py',215),
  ('expression -> expression DIVIDES expression','expression',3,'p_expression','parlex.py',216),
  ('expression -> expression TIMES expression','expression',3,'p_expression','parlex.py',217),
  ('expression -> expression power int','expression',3,'p_expression','parlex.py',218),
  ('expression -> expression power coefficient','expression',3,'p_expression','parlex.py',219),
  ('expression -> openingBracket expression closingBracket','expression',3,'p_expression','parlex.py',220),
  ('expression -> expression power openingBracket expression closingBracket','expression',5,'p_expression_power','parlex.py',226),
  ('expression -> int','expression',1,'p_expression_number','parlex.py',232),
  ('expression -> float','expression',1,'p_expression_number','parlex.py',233),
  ('expression -> coefficient','expression',1,'p_expression_number','parlex.py',234),
  ('expression -> pi','expression',1,'p_expression_number','parlex.py',235),
  ('expression -> percentage','expression',1,'p_expression_number','parlex.py',236),
  ('expression -> alpha','expression',1,'p_expression_number','parlex.py',237),
  ('expression -> beta','expression',1,'p_expression_number','parlex.py',238),
  ('expression -> gamma','expression',1,'p_expression_number','parlex.py',239),
  ('expression -> theta','expression',1,'p_expression_number','parlex.py',240),
  ('expression -> infinity','expression',1,'p_expression_number','parlex.py',241),
  ('coefficient -> int variable','coefficient',2,'p_coefficient_const','parlex.py',247),
  ('coefficient -> float variable','coefficient',2,'p_coefficient_const','parlex.py',248),
  ('coefficient -> coefficient variable','coefficient',2,'p_coefficient_const','parlex.py',249),
  ('coefficient -> expression percentage','coefficient',2,'p_coefficient_const','parlex.py',250),
  ('coefficient -> int theta','coefficient',2,'p_coefficient_sym','parlex.py',260),
  ('coefficient -> int beta','coefficient',2,'p_coefficient_sym','parlex.py',261),
  ('coefficient -> int alpha','coefficient',2,'p_coefficient_sym','parlex.py',262),
  ('coefficient -> float theta','coefficient',2,'p_coefficient_sym','parlex.py',263),
  ('coefficient -> float beta','coefficient',2,'p_coefficient_sym','parlex.py',264),
  ('coefficient -> float alpha','coefficient',2,'p_coefficient_sym','parlex.py',265),
  ('coefficient -> variable','coefficient',1,'p_coefficient_var','parlex.py',271),
  ('trigono -> sin power int','trigono',3,'p_trigono_int','parlex.py',277),
  ('trigono -> cos power int','trigono',3,'p_trigono_int','parlex.py',278),
  ('trigono -> tan power int','trigono',3,'p_trigono_int','parlex.py',279),
  ('trigono -> sin power variable','trigono',3,'p_trigono_var','parlex.py',285),
  ('trigono -> cos power variable','trigono',3,'p_trigono_var','parlex.py',286),
  ('trigono -> tan power variable','trigono',3,'p_trigono_var','parlex.py',287),
  ('equation -> variable equal expression','equation',3,'p_equation','parlex.py',293),
  ('logical_expr -> expression equal expression','logical_expr',3,'p_logical_expr','parlex.py',299),
  ('logical_expr -> expression bigger expression','logical_expr',3,'p_logical_expr','parlex.py',300),
  ('logical_expr -> expression smaller expression','logical_expr',3,'p_logical_expr','parlex.py',301),
  ('logical_expr -> expression biggerEqual expression','logical_expr',3,'p_logical_expr','parlex.py',302),
  ('logical_expr -> expression smallerEqual expression','logical_expr',3,'p_logical_expr','parlex.py',303),
  ('logical_expr -> expression notEqual expression','logical_expr',3,'p_logical_expr','parlex.py',304),
  ('logical_expr -> expression approx expression','logical_expr',3,'p_logical_expr','parlex.py',305),
  ('assign -> variable equal int','assign',3,'p_assign','parlex.py',311),
  ('empty -> <empty>','empty',0,'p_empty','parlex.py',328),
]
